#version 440
struct LightInfo {
  vec4 Position; // Light position in eye coords.
  vec3 La;       // Ambient light intensity
  vec3 Ld;       // Diffuse light intensity
  vec3 Ls;       // Specular light intensity
};
uniform LightInfo Light;

struct MaterialInfo {
  vec3 Ka;            // Ambient reflectivity
  vec3 Kd;            // Diffuse reflectivity
  vec3 Ks;            // Specular reflectivity
  float Shininess;    // Specular shininess factor
};
uniform MaterialInfo Material;

in vec3 GPosition;
in vec3 GNormal;
noperspective in vec3 GEdgeDistance;

layout( location = 0 ) out vec4 FragColor;
uniform vec3 SegmentColor;
uniform bool isSlice;
vec3 phongModel( vec4 position, vec3 norm )
{
    vec3 s = normalize(vec3(Light.Position - position));
    vec3 v = normalize(-position.xyz);
    vec3 r = reflect( -s, norm );
    vec3 ambient = Light.La * Material.Ka;
    float sDotN = max( dot(s,norm), 0.0 );
    vec3 diffuse = Light.Ld * Material.Kd * sDotN;
    vec3 spec = vec3(0.0);
    if( sDotN > 0.0 )
        spec = Light.Ls * Material.Ks *
               pow( max( dot(r,v), 0.0 ), Material.Shininess );

    return ambient + diffuse + spec;
}

void main() {
	float d = min( GEdgeDistance.x, GEdgeDistance.y );
	d = min( d, GEdgeDistance.z );
	float mixVal = smoothstep(-0.01,0.01, d );

	vec3 LightColor=phongModel(vec4(GPosition,1.0),GNormal);

	vec3 Color=mix(LightColor, SegmentColor ,0.7);
	if(isSlice)
		FragColor=vec4(1.0,0.0,0.0,1.0);
	else
		FragColor = mix( vec4(0.4,0.4,0.4,1.0), vec4(Color,1.0), mixVal );
}